from ydata_synthetic.synthesizers.timeseries import TimeGAN
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

class TimeGANGenerator:
    def __init__(self, n_seq=188, n_features=1, latent_dim=32, epochs=500, batch_size=32, lr=5e-4):
        """
        Initialize the TimeGAN generator with model parameters.
        """
        self.n_seq = n_seq
        self.n_features = n_features
        self.latent_dim = latent_dim
        self.epochs = epochs
        self.batch_size = batch_size
        self.lr = lr
        self.synth = None

    def prepare_data(self, df, label, n_samples=None):
        """
        Prepares ECG data for TimeGAN by selecting samples for a specific class 
        and reshaping to (samples, time steps, features).
        """
        class_data = df[df.iloc[:, -1] == label].iloc[:, :-1].values
        if n_samples:
            class_data = class_data[:n_samples]
        class_data = np.expand_dims(class_data, axis=-1)
        print(f"Prepared data shape for TimeGAN: {class_data.shape}")
        return class_data

    def fit(self, df, label, n_samples=5000):
        """
        Fits the TimeGAN model on the provided class data.
        """
        # Prepare the data
        timegan_data = self.prepare_data(df, label, n_samples)
        
        # Define model parameters
        timegan_args = {
            'epochs': self.epochs,
            'batch_size': self.batch_size,
            'lr': self.lr,
            'noise_dim': 32,
            'dim': 128,
            'discriminator_steps': 1,
            'pac': 10,
            'beta_1': 0.5,
            'beta_2': 0.9,
            'gamma': 1
        }
        
        # Initialize and train the TimeGAN model
        self.synth = TimeGAN(model_parameters=timegan_args, n_seq=self.n_seq, n_features=self.n_features, latent_dim=self.latent_dim)
        self.synth.fit(timegan_data)
        print("TimeGAN model trained successfully.")

    def generate(self, n_samples=1000, label=1):
        """
        Generates synthetic ECG data using the trained TimeGAN model.
        """
        if self.synth is None:
            raise ValueError("TimeGAN model is not trained. Please call the fit() method first.")
        
        # Generate synthetic samples
        synthetic_data = self.synth.sample(n_samples)
        synthetic_data = synthetic_data.reshape(n_samples, -1)
        
        # Add labels to the synthetic data
        synthetic_labels = np.full((synthetic_data.shape[0], 1), label)
        synthetic_data_labeled = np.hstack((synthetic_data, synthetic_labels))
        
        # Convert to DataFrame
        df_synthetic = pd.DataFrame(synthetic_data_labeled)
        print(f"Generated {n_samples} synthetic samples for class {label}.")
        return df_synthetic

    def plot_samples(self, df_synthetic, n_samples=5):
        """
        Plots a few synthetic ECG samples generated by TimeGAN.
        """
        plt.figure(figsize=(10, 6))
        for i in range(n_samples):
            plt.plot(df_synthetic.iloc[i, :-1], label=f"Sample {i+1}")
        plt.xlabel('Time Step (Sample Index)')
        plt.ylabel('ECG Signal Amplitude')
        plt.title('Synthetic ECG Signal Waveforms Generated by TimeGAN')
        plt.legend()
        plt.grid(True)
        plt.show()

